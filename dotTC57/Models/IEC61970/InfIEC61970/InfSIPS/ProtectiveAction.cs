///////////////////////////////////////////////////////////
//  ProtectiveAction.cs
//  Implementation of the Class ProtectiveAction
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:05:16 AM
//  Original author: sveinols
///////////////////////////////////////////////////////////

using TC57CIM.IEC61970.Base.Core;
namespace TC57CIM.IEC61970.InfIEC61970.InfSIPS {
	/// <summary>
	/// A protective action for supporting the integrity of the power system.
	/// </summary>
	public class ProtectiveAction : IdentifiedObject {

		/// <summary>
		/// The status of the class set by operation or by signal. Optional field that will
		/// override other status fields.
		/// </summary>
		public bool enabled;
		/// <summary>
		/// The default/normal value used when other active signal/values are missing.
		/// </summary>
		public bool normalEnabled;
		/// <summary>
		/// Association to a Gate that through a gate logic and input pin defines communication condition for the ProtectiveAction.
		/// </summary>
		public TC57CIM.IEC61970.InfIEC61970.InfSIPS.Gate? GateComCondition;
		/// <summary>
		/// Association to a Gate that through a gate logic and input pin defines enabling
		/// of the ProtectiveAction.
		/// </summary>
		public TC57CIM.IEC61970.InfIEC61970.InfSIPS.Gate? GateEnabledCondition;

		/// <summary>
		/// Initializes a new instance of the <see cref="ProtectiveAction"/> class.
		/// </summary>
		public ProtectiveAction(){

		}

    /// <summary>
    /// Releases resources used by the <see cref="ProtectiveAction"/> class.
    /// </summary>
    public override void Dispose(){

		}

	}//end ProtectiveAction

}//end namespace InfSIPS
