///////////////////////////////////////////////////////////
//  RemedialActionScheme.cs
//  Implementation of the Class RemedialActionScheme
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:05:19 AM
//  Original author: sveinols
///////////////////////////////////////////////////////////

using TC57CIM.IEC61970.Base.Core;
namespace TC57CIM.IEC61970.InfIEC61970.InfSIPS {
	/// <summary>
	/// Remedial Action Scheme (RAS), Special Protection Schemes (SPS), System
	/// Protection Schemes (SPS) or System Integrity Protection Schemes (SIPS).
	/// </summary>
	public class RemedialActionScheme : PowerSystemResource {

		/// <summary>
		/// The status of the class set by operation or by signal. Optional field that will
		/// override other status fields.
		/// </summary>
		public bool armed;
		/// <summary>
		/// Kind of Remedial Action Scheme (RAS).
		/// </summary>
		public RemedialActionSchemeKind kind;
		/// <summary>
		/// The default/normal value used when other active signal/values are missing.
		/// </summary>
		public bool normalArmed;
		/// <summary>
		/// A Remedial Action Scheme (RAS) consist of one or more stage that are trigger
		/// and execute protection action.
		/// </summary>
		/// <summary>
		/// A Remedial Action Scheme (RAS) consist of one or more stage that are trigger and execute protection action.
		/// </summary>
		public TC57CIM.IEC61970.InfIEC61970.InfSIPS.Stage? Stage;

		/// <summary>
		/// Initializes a new instance of the <see cref="RemedialActionScheme"/> class.
		/// </summary>
		public RemedialActionScheme(){

		}

    /// <summary>
    /// Releases resources used by the <see cref="RemedialActionScheme"/> class.
    /// </summary>
    public override void Dispose(){

		}

	}//end RemedialActionScheme

}//end namespace InfSIPS