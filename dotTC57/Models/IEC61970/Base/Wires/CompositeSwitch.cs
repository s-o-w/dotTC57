///////////////////////////////////////////////////////////
//  CompositeSwitch.cs
//  Implementation of the Class CompositeSwitch
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:04:43 AM
///////////////////////////////////////////////////////////

using TC57CIM.IEC61970.Base.Core;
namespace TC57CIM.IEC61970.Base.Wires {
	/// <summary>
	/// A model of a set of individual Switches normally enclosed within the same
	/// cabinet and possibly with interlocks that restrict the combination of switch
	/// positions. These are typically found in medium voltage distribution networks.
	/// A CompositeSwitch could represent a Ring-Main-Unit (RMU), or pad-mounted
	/// switchgear, with primitive internal devices such as an internal bus-bar plus 3
	/// or 4 internal switches each of which may individually be open or closed. A
	/// CompositeSwitch and a set of contained Switches can also be used to represent a
	/// multi-position switch e.g. a switch that can connect a circuit to Ground, Open
	/// or Busbar.
	/// </summary>
	public class CompositeSwitch : Equipment {

		/// <summary>
		/// An alphanumeric code that can be used as a reference to extra information such
		/// as the description of the interlocking scheme if any.
		/// </summary>
		public string compositeSwitchType;
		/// <summary>
		/// Switches contained in this Composite switch.
		/// </summary>
		public TC57CIM.IEC61970.Base.Wires.Switch Switches;

		/// <summary>
		/// Initializes a new instance of the <see cref="CompositeSwitch"/> class
		/// </summary>
		public CompositeSwitch(){

		}

    /// <summary>
    /// Disposes this instance
    /// </summary>
    public override void Dispose(){

		}

	}//end CompositeSwitch

}//end namespace Wires