///////////////////////////////////////////////////////////
//  PetersenCoil.cs
//  Implementation of the Class PetersenCoil
//  Generated by Enterprise Architect
//  Created on:      15-Jun-2024 10:05:12 AM
//  Original author: kdemaree
///////////////////////////////////////////////////////////

namespace TC57CIM.IEC61970.Base.Wires {
	/// <summary>
	/// A variable impedance device normally used to offset line charging during single
	/// line faults in an ungrounded section of network.
	/// </summary>
	public class PetersenCoil : EarthFaultCompensator {

		/// <summary>
		/// The mode of operation of the Petersen coil.
		/// </summary>
		public PetersenCoilModeKind mode;
		/// <summary>
		/// The nominal voltage for which the coil is designed.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Voltage nominalU;
		/// <summary>
		/// The offset current that the Petersen coil controller is operating from the
		/// resonant point.  This is normally a fixed amount for which the controller is
		/// configured and could be positive or negative.  Typically 0 to 60 A depending on
		/// voltage and resonance conditions.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.CurrentFlow offsetCurrent;
		/// <summary>
		/// The control current used to control the Petersen coil also known as the
		/// position current.  Typically in the range of 20 mA to 200 mA.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.CurrentFlow positionCurrent;
		/// <summary>
		/// The maximum reactance.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Reactance xGroundMax;
		/// <summary>
		/// The minimum reactance.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Reactance xGroundMin;
		/// <summary>
		/// The nominal reactance.  This is the operating point (normally over
		/// compensation) that is defined based on the resonance point in the healthy
		/// network condition.  The impedance is calculated based on nominal voltage
		/// divided by position current.
		/// </summary>
		public TC57CIM.IEC61970.Base.Domain.Reactance xGroundNominal;

		/// <summary>
		/// Initializes a new instance of the <see cref="PetersenCoil"/> class
		/// </summary>
		public PetersenCoil(){

		}

    /// <summary>
    /// Disposes this instance
    /// </summary>
    public override void Dispose(){

		}

	}//end PetersenCoil

}//end namespace Wires